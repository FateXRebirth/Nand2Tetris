class Queue {
	field int size;
	field int first;
	field int rear;
	field Array Queue;
	
	constructor Queue new(int length) {
        let size = length;
        let Queue = Array.new(length);
        do init();
        return this;
    }

    method void init() {
        var int i;	
		let first = 0;
		let rear = 0;
    	do Output.printString("Initialization...");
        do Output.println();
    	let i = 0;
    	while ( ~(i = size) ) {
    		let Queue[i] = 0;
    		let i = i + 1;
    	}
        do list();
        do Output.println();
    	return;
    }

    method void add(int value) {
    	if(rear = size) {
    		if(rear = first) {
    			do Output.printString("Queue is full, you have to init");
    			do Output.println();
    		} else {
    			do Output.printString("Queue is full, you only can remove");
    			do Output.println();
    		}
    	} else {
    		let Queue[rear] = value;
    		let rear = rear + 1;
    		do list();
    	}
    	
    	return;
    }

    method void remove() {
    	if(first = rear) {
    		do Output.printString("Queue is empty, you have to add or init");
    		do Output.println();
    	} else {
    		let Queue[first] = 0;
    		let first = first + 1;
    		do list();
    	}
    	return;
    }

    method void list() {
    	var int i;
    	let i = 0;
    	do Output.printString("First -> ");
		do Output.printInt(first);
		do Output.printString(" Rear -> ");
		do Output.printInt(rear);
        do Output.println();
    	do Output.printString("Queue -> [ ");
    	while ( ~(i = size) ) {
    		do Output.printInt(Queue[i]);
    		let i = i + 1;
    		do Output.printString(" ");
    	}
    	do Output.printString("]");
        do Output.println();
    	return;
    }

    method void dispose() {
        do Queue.dispose();
        do Memory.deAlloc(this);
        return;
    }
}