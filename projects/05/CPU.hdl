// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=A);
    Not(in=A, out=C);

    And(a=C, b=instruction[5], out=LoadMux);
    Mux16(a=instruction, b=feedback, sel=LoadMux, out=OutMux);
    
    Or(a=A, b=LoadMux, out=LoadA);
    ARegister(in=OutMux, load=LoadA, out=OutA, out[0..14]=addressM);

    Mux16(a=OutA, b=inM, sel=instruction[12], out=OutAM);

    And(a=C, b=instruction[4], out=LoadD);
    DRegister(in=feedback, load=LoadD, out=OutD);
    
    And(a=C, b=instruction[3], out=writeM);
    ALU(x=OutD, y=OutAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
    ny=instruction[8], f=instruction[7], no=instruction[6], out=feedback, out=outM, zr=ZR, ng=NG);
   
    And(a=ZR, b=instruction[1], out=JEQ);
    And(a=NG, b=instruction[2], out=JLT);
    Or(a=ZR, b=NG, out=ZRorNG);
    Not(in=ZRorNG, out=PS);
    And(a=PS, b=instruction[0], out=JGT);
    Or(a=JGT, b=JEQ, out=JGE);
    Or(a=JGE, b=JLT, out=JMP);
    And(a=C, b=JMP, out=LOAD);
    Not(in=LOAD, out=INC);
    
    PC(in=OutA, load=LOAD, inc=INC, reset=reset, out[0..14]=pc);
}
